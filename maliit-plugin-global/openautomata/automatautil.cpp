// Copyright (c) 2013-2018 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

#include "automatautil.h"
#include <QHash>

struct AsciiKeyMap
{
    quint32 normalKey;
    quint32 shiftedKey;
    quint32 altKey;
    quint32 shiftedAltKey;
};

bool isLetter(quint32 nativeScanCode)
{
    return (nativeScanCode >= 0x10 && nativeScanCode <= 0x19) ||
           (nativeScanCode >= 0x1E && nativeScanCode <= 0x26) ||
           (nativeScanCode >= 0x2C && nativeScanCode <= 0x32);
}

quint32 nativeCodeToAscii(quint32 nativeScanCode, Qt::KeyboardModifiers modifiers, bool isCapsLockOn, bool isNumLockOn)
{
    static bool init = false;
    static QHash<quint32, AsciiKeyMap> keymap;

    if (!init) {
        keymap.reserve(60);
        keymap.insert(0x02, {0x31,0x21,0xA0,0xDA});
        keymap.insert(0x03, {0x32,0x40,0xA1,0xDB});
        keymap.insert(0x04, {0x33,0x23,0xA2,0xDC});
        keymap.insert(0x05, {0x34,0x24,0xA3,0xDD});
        keymap.insert(0x06, {0x35,0x25,0xA4,0xDE});
        keymap.insert(0x07, {0x36,0x5E,0xA5,0xDF});
        keymap.insert(0x08, {0x37,0x26,0xA6,0xE0});
        keymap.insert(0x09, {0x38,0x2A,0xA7,0xE1});
        keymap.insert(0x0A, {0x39,0x28,0xA8,0xE2});
        keymap.insert(0x0B, {0x30,0x29,0xA9,0xE3});
        keymap.insert(0x0C, {0x2D,0x5F,0xAA,0xE4});
        keymap.insert(0x0D, {0x3D,0x2B,0xAB,0xE5});
        keymap.insert(0x10, {0x71,0x51,0xAC,0xE6});
        keymap.insert(0x11, {0x77,0x57,0xAD,0xE7});
        keymap.insert(0x12, {0x65,0x45,0xAE,0xE8});
        keymap.insert(0x13, {0x72,0x52,0xAF,0xE9});
        keymap.insert(0x14, {0x74,0x54,0xB0,0xEA});
        keymap.insert(0x15, {0x79,0x59,0xB1,0xEB});
        keymap.insert(0x16, {0x75,0x55,0xB2,0xEC});
        keymap.insert(0x17, {0x69,0x49,0xB3,0xED});
        keymap.insert(0x18, {0x6F,0x4F,0xB4,0xEE});
        keymap.insert(0x19, {0x70,0x50,0xB5,0xEF});
        keymap.insert(0x1A, {0x5B,0x7B,0xB6,0xF0});
        keymap.insert(0x1B, {0x5D,0x7D,0xB7,0xF1});
        keymap.insert(0x1E, {0X61,0x41,0xB8,0xF2});
        keymap.insert(0x1F, {0x73,0x53,0xB9,0xF3});
        keymap.insert(0x20, {0x64,0x44,0xBA,0xF4});
        keymap.insert(0x21, {0x66,0x46,0xBB,0xF5});
        keymap.insert(0x22, {0x67,0x47,0xBC,0xF6});
        keymap.insert(0x23, {0x68,0x48,0xBD,0xF7});
        keymap.insert(0x24, {0x6A,0x4A,0xBE,0xF8});
        keymap.insert(0x25, {0x6B,0x4B,0xBF,0xF9});
        keymap.insert(0x26, {0x6C,0x4C,0xC0,0xFA});
        keymap.insert(0x27, {0x3B,0x3A,0xC1,0xFB});
        keymap.insert(0x28, {0x27,0x22,0xC2,0xFC});
        keymap.insert(0x29, {0x60,0x7E,0xC3,0xFD});
        keymap.insert(0x2B, {0x5C,0x7C,0xC4,0xFE});
        keymap.insert(0x2C, {0x7A,0x5A,0xC5,0xFF});
        keymap.insert(0x2D, {0x78,0x58,0xC6,0x100});
        keymap.insert(0x2E, {0x63,0x43,0xC7,0x101});
        keymap.insert(0x2F, {0x76,0x56,0xC8,0x102});
        keymap.insert(0x30, {0x62,0x42,0xC9,0x103});
        keymap.insert(0x31, {0x6E,0x4E,0xCA,0x104});
        keymap.insert(0x32, {0x6D,0x4D,0xCB,0x105});
        keymap.insert(0x33, {0x2C,0x3C,0xCC,0x106});
        keymap.insert(0x34, {0x2E,0x3E,0xCD,0x107});
        keymap.insert(0x35, {0x2F,0x3F,0xCE,0x108});
        keymap.insert(0x39, {0x20,0x20,0xCF,0x109});
        keymap.insert(0x4F, {0x85,0x31,0xD0,0x10A});
        keymap.insert(0x50, {0x80,0x32,0xD1,0x10B});
        keymap.insert(0x51, {0x81,0x33,0xD2,0x10C});
        keymap.insert(0x4B, {0x86,0x34,0xD3,0x10D});
        keymap.insert(0x4C, {0x87,0x35,0xD4,0x10E});
        keymap.insert(0x4D, {0x88,0x36,0xD5,0x10F});
        keymap.insert(0x47, {0x89,0x37,0xD6,0x110});
        keymap.insert(0x48, {0x90,0x38,0xD7,0x111});
        keymap.insert(0x49, {0x91,0x39,0xD8,0x112});
        keymap.insert(0x52, {0x82,0x30,0xD9,0x113});
        init = true;
    }

    AsciiKeyMap result = keymap.value(nativeScanCode);

    if ((modifiers & Qt::AltModifier) && (modifiers & Qt::ShiftModifier)) {
        return result.shiftedAltKey;
    }

    if (modifiers & Qt::AltModifier) {
        return result.altKey;
    }

    if (isCapsLockOn && isLetter(nativeScanCode)) {
        if (modifiers & Qt::ShiftModifier) {
            return result.normalKey;
        } else {
            return result.shiftedKey;
        }
    }

    if (nativeScanCode >= 0x47 && nativeScanCode <= 0x52) {
        return isNumLockOn ? result.shiftedKey : 0;
    }

    if (modifiers & Qt::ShiftModifier) {
        return result.shiftedKey;
    } else {
        return result.normalKey;
    }
}
